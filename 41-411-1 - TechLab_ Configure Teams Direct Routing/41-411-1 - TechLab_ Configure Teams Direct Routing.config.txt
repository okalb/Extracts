

Id                                               : 165887
Number                                           : 41-411-1
Name                                             : TechLab: Configure Teams Direct Routing
SeriesId                                         : 35026
OrganizationId                                   : 4250
PlatformId                                       : 2
EnableCodeLabFabric                              : False
ParentId                                         : 
ParentName                                       : 
InheritEnvironment                               : False
EnvironmentLabProfileId                          : 
InheritContent                                   : False
ContentLabProfileId                              : 
MinInstanceStorageGb                             : 20
DevelopmentStatusId                              : 10
CurrentDevelopmentStatusId                       : 10
DurationMinutes                                  : 1
DurationUnit                                     : 10
AllowTimeExtensions                              : True
TimeExtensionMinutes                             : 15
TimeExtensionShowNotificationMinutes             : 10
Level                                            : 100
EvaluationId                                     : 105
AdvertisingCampaignId                            : 
Description                                      : 
Enabled                                          : True
EnableBugReporting                               : False
BugReportEmailAddress                            : 
OwnerName                                        : 
OwnerEmail                                       : 
OverrideCloudPortalUrl                           : False
CloudPortalUrl                                   : 
AppendLabDataToCloudPortalUrl                    : False
NetworksJson                                     : {@{Id=233643; Description=; Name=Private Network; PhysicalNetworkAdapterName=; IsStudentVisible=False; DevelopmentOnly=False; Type=0; VLanId=; GatewayAddress=; SubnetMask=; EnableDhcp=False; DhcpStart=; DhcpEnd=; AddressPrefix=10.0.0.0/24; IsSharedClassNetwork=False; SubnetId=; AccessControlListId=; AccessControlListName=; CustomNetworkId=; CustomNetworkName=; EnableNat=False; EnableEndpoints=False; EndpointGatewayIpAddress=; EndpointGatewaySubnetMask=}, @{Id=233644; Description=; Name=PublicInternet; PhysicalNetworkAdapterName=; IsStudentVisible=False; DevelopmentOnly=False; Type=20; VLanId=; GatewayAddress=; SubnetMask=; EnableDhcp=False; DhcpStart=; DhcpEnd=; AddressPrefix=10.0.0.0/24; IsSharedClassNetwork=False; SubnetId=; AccessControlListId=; AccessControlListName=; CustomNetworkId=; CustomNetworkName=; EnableNat=False; EnableEndpoints=False; EndpointGatewayIpAddress=; EndpointGatewaySubnetMask=}, @{Id=233645; Description=; Name=WebNAT; PhysicalNetworkAdapterName=; IsStudentVisible=False; DevelopmentOnly=False; Type=10; VLanId=; GatewayAddress=192.168.0.1; SubnetMask=255.255.255.0; EnableDhcp=False; DhcpStart=; DhcpEnd=; AddressPrefix=10.0.0.0/24; IsSharedClassNetwork=False; SubnetId=; AccessControlListId=; AccessControlListName=; CustomNetworkId=; CustomNetworkName=; EnableNat=False; EnableEndpoints=False; EndpointGatewayIpAddress=; EndpointGatewaySubnetMask=}}
SharedClassNetworksJson                          : {}
ContainerNetworksJson                            : {}
HasVirtualMachinePool                            : False
VirtualMachinesJson                              : {@{Id=434437; DisplayName=RRAS01; ReplacementTokenAlias=RRAS01; AutoStart=True; InitialSystemTimeDate=; InitialSystemTimeTime=; WaitForHeartbeat=True; IsHostTimeSyncEnabled=True; IsStudentVisible=False; StartupDelaySeconds=; ResumeOrder=0; ResumeDelaySeconds=; AllowRevert=False; TrackLabInstanceData=False; AllowDesktopConnections=True; AllowSshConnections=False; FloppyMediaId=; DvdMediaId=; TargetResourceGroupId=; CloudOperatingSystemType=0; DiskType=0; UseCloudHybridBenefit=False; PlatformId=2; UseAzureMarketplaceImage=False; Username=Admin; Password=Passw0rd!; RequiresPremiumCloudFeatures=False; ProfileName=RRAS01; ProfileId=217241; HasDvdDrive=True; HasFloppyDrive=False; NetworkConnections=System.Object[]; Endpoints=System.Object[]}, @{Id=434438; DisplayName=CLIENT01; ReplacementTokenAlias=CLIENT01; AutoStart=True; InitialSystemTimeDate=; InitialSystemTimeTime=; WaitForHeartbeat=True; IsHostTimeSyncEnabled=True; IsStudentVisible=True; StartupDelaySeconds=; ResumeOrder=0; ResumeDelaySeconds=; AllowRevert=False; TrackLabInstanceData=False; AllowDesktopConnections=True; AllowSshConnections=False; FloppyMediaId=; DvdMediaId=; TargetResourceGroupId=; CloudOperatingSystemType=0; DiskType=0; UseCloudHybridBenefit=False; PlatformId=2; UseAzureMarketplaceImage=False; Username=Admin; Password=Passw0rd!; RequiresPremiumCloudFeatures=False; ProfileName=CLIENT01 (Win11); ProfileId=217246; HasDvdDrive=True; HasFloppyDrive=False; NetworkConnections=System.Object[]; Endpoints=System.Object[]}, @{Id=434439; DisplayName=CLIENT02; ReplacementTokenAlias=CLIENT02; AutoStart=True; InitialSystemTimeDate=; InitialSystemTimeTime=; WaitForHeartbeat=True; IsHostTimeSyncEnabled=True; IsStudentVisible=False; StartupDelaySeconds=; ResumeOrder=0; ResumeDelaySeconds=; AllowRevert=False; TrackLabInstanceData=False; AllowDesktopConnections=True; AllowSshConnections=False; FloppyMediaId=; DvdMediaId=; TargetResourceGroupId=; CloudOperatingSystemType=0; DiskType=0; UseCloudHybridBenefit=False; PlatformId=2; UseAzureMarketplaceImage=False; Username=Admin; Password=Passw0rd!; RequiresPremiumCloudFeatures=False; ProfileName=CLIENT02 (Win11); ProfileId=217245; HasDvdDrive=True; HasFloppyDrive=False; NetworkConnections=System.Object[]; Endpoints=System.Object[]}, @{Id=434440; DisplayName=MTR01; ReplacementTokenAlias=MTR01; AutoStart=True; InitialSystemTimeDate=; InitialSystemTimeTime=; WaitForHeartbeat=True; IsHostTimeSyncEnabled=True; IsStudentVisible=True; StartupDelaySeconds=; ResumeOrder=0; ResumeDelaySeconds=; AllowRevert=False; TrackLabInstanceData=False; AllowDesktopConnections=True; AllowSshConnections=False; FloppyMediaId=; DvdMediaId=; TargetResourceGroupId=; CloudOperatingSystemType=0; DiskType=0; UseCloudHybridBenefit=False; PlatformId=2; UseAzureMarketplaceImage=False; Username=Admin; Password=sfb; RequiresPremiumCloudFeatures=False; ProfileName=MTR01; ProfileId=217242; HasDvdDrive=True; HasFloppyDrive=False; NetworkConnections=System.Object[]; Endpoints=System.Object[]}...}
VirtualMachinePoolJson                           : {}
VirtualMachinePoolMembersJson                    : {}
DefaultVirtualMachineProfileId                   : 217246
DefaultVirtualMachineLabPoolProfileId            : 
DefaultResourceId                                : 
RemovableMediaJson                               : {}
ContainerImagesJson                              : {}
ContainerVolumesJson                             : {}
CloudResourceGroupsJson                          : {}
CloudTemplateValuesJson                          : 
CloudDatacenterAvailabilityJson                  : {}
CloudPortalCredentialProfilesJson                : {}
CloudSubscriptionInstancePoliciesJson            : {}
CloudScriptContextPoliciesJson                   : {}
CloudSubscriptionInstanceQuotasJson              : {}
CloudPlatform                                    : 
CloudPlatformListJson                            : {@{Key=10; Value=Azure}, @{Key=11; Value=AWS}, @{Key=12; Value=GCP}, @{Key=13; Value=Unknown}}
CloudSecurityReviewEventHasOccurred              : False
EnableAutomaticPortalLogin                       : False
DeployDefaultResources                           : False
CloudSubscriptionPoolId                          : 
CloudSubscriptionPoolName                        : 
CloudDeploymentFailureBehavior                   : 0
EnableAzureTAP                                   : False
OverrideScriptContext                            : False
RunScriptAsAdmin                                 : False
ExpectedCloudCost                                : 
InheritPreinstancing                             : False
EnablePreinstancing                              : False
SavePreinstances                                 : True
PreinstanceSaveDelaySeconds                      : 0
PreinstanceBatchSize                             : 1
PreinstanceStockLevel                            : 0
PreinstanceDatacenterStockLevelsJson             : 
EnableCloudCredentialAssignment                  : False
PreinstanceScheduleJson                          : {}
InheritLifeCycleActions                          : True
LifeCycleActionsJson                             : {@{Id=88816; Name=Sync Time CLIENT01; SortOrder=0; Event=20; ActionType=30; Url=; AppendLabData=False; Synchronous=False; HttpVerb=0; HttpContent=; HttpHeaders=; Timeout=600; Subject=; Notification=; Script=Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\Parameters -Name Type -Value "NTP"
                                                   Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\tzautoupdate -Name Start -Value "3"
                                                   Set-Service -Name W32Time -StartupType Automatic
                                                   Start-Service W32Time
                                                   w32tm /resync
                                                   Start-Sleep -Seconds 1
                                                   w32tm /resync; ScriptDescription=; ScriptGuidance=; ScriptSource=0; ScriptLanguage=0; ScriptTargetId=217246; ScriptEngineImageId=; Delay=15; ErrorAction=0; CustomErrorNotification=; Enabled=True; NotificationName=; ScriptEnginePackagesJson=; RepeatScriptUntilTrue=False; RepeatScriptIntervalSeconds=60; RepeatScriptTimeoutMinutes=10; MaxRetries=4; CopilotPromptJson=}, @{Id=106568; Name=Remove and release phone numbers issued in lab; SortOrder=0; Event=80; ActionType=30; Url=; AppendLabData=False; Synchronous=True; HttpVerb=0; HttpContent=; HttpHeaders=; Timeout=600; Subject=; Notification=; Script=$adminName = '@lab.CloudCredential(M365Calling).AdministrativeUsername'
                                                   $password = '@lab.CloudCredential(M365Calling).AdministrativePassword'
                                                   $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ($adminName, (ConvertTo-SecureString -AsPlainText -Force -String $password))
                                                   Connect-MicrosoftTeams -Credential $cred
                                                   
                                                   Get-CsOnlineUser | Where-Object {($_.LineUri -ne $null) -and ($_.LineUri -notlike "tel:+1425555*")} | foreach {Remove-CsPhoneNumberAssignment -Identity $_.UserPrincipalName -RemoveAll -ErrorAction SilentlyContinue}
                                                   Start-Sleep -Seconds 5
                                                   $numbers = (Get-CsPhoneNumberAssignment | Where-Object {$_.PstnAssignmentStatus -eq "Unassigned"}).TelephoneNumber
                                                   
                                                   If ($null -ne $numbers) {
                                                       foreach ($number in $numbers) {
                                                           Remove-CsOnlineTelephoneNumber -TelephoneNumber $number -ErrorAction SilentlyContinue | Out-Null
                                                       }
                                                   }; ScriptDescription=; ScriptGuidance=; ScriptSource=0; ScriptLanguage=0; ScriptTargetId=217246; ScriptEngineImageId=; Delay=0; ErrorAction=0; CustomErrorNotification=; Enabled=True; NotificationName=; ScriptEnginePackagesJson=; RepeatScriptUntilTrue=False; RepeatScriptIntervalSeconds=60; RepeatScriptTimeoutMinutes=10; MaxRetries=2; CopilotPromptJson=}, @{Id=88817; Name=Sync Time CLIENT02; SortOrder=1; Event=20; ActionType=30; Url=; AppendLabData=False; Synchronous=False; HttpVerb=0; HttpContent=; HttpHeaders=; Timeout=600; Subject=; Notification=; Script=Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\Parameters -Name Type -Value "NTP"
                                                   Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\tzautoupdate -Name Start -Value "3"
                                                   Set-Service -Name W32Time -StartupType Automatic
                                                   Start-Service W32Time
                                                   w32tm /resync
                                                   Start-Sleep -Seconds 1
                                                   w32tm /resync; ScriptDescription=; ScriptGuidance=; ScriptSource=0; ScriptLanguage=0; ScriptTargetId=217245; ScriptEngineImageId=; Delay=15; ErrorAction=0; CustomErrorNotification=; Enabled=False; NotificationName=; ScriptEnginePackagesJson=; RepeatScriptUntilTrue=False; RepeatScriptIntervalSeconds=60; RepeatScriptTimeoutMinutes=10; MaxRetries=4; CopilotPromptJson=}, @{Id=88818; Name=Create lab users; SortOrder=2; Event=20; ActionType=30; Url=; AppendLabData=False; Synchronous=False; HttpVerb=0; HttpContent=; HttpHeaders=; Timeout=900; Subject=; Notification=; Script=$adminName = '@lab.CloudCredential(WWM365E510lic).Username'
                                                   $password = '@lab.CloudCredential(WWM365E510lic).Password'
                                                   $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ($adminName, (ConvertTo-SecureString -AsPlainText -Force -String $password))
                                                   $securePass = ConvertTo-SecureString $password -AsPlainText -Force
                                                   $tenantName = '@lab.CloudCredential(WWM365E510lic).TenantName'
                                                   $tenantSPN = "@" + $tenantName
                                                   $adminUsers = @('Allan Deyoung', 'Cameron White', 'Debra Berger', 'Irvin Sayers', 'Megan Bowen', 'Raul Razo')
                                                   $aadUsers = @('Christie Cline', 'Pradeep Gupta')
                                                   $adminUsersUpn = @()
                                                   foreach ($adminUser in $adminUsers) {
                                                       $userUPN = $adminUser.Split(" ")[0] + $tenantSPN
                                                       $adminUsersUpn += $userUPN
                                                   }
                                                   $hrGroupName = "Human Resources"
                                                   $existingUsers = @()
                                                   
                                                   # Connect to online services
                                                   Connect-AzAccount -Credential $cred | Out-Null
                                                   Connect-AzureAD -Credential $cred | Out-Null
                                                   
                                                   # Create a new Azure AD group
                                                   if ($null -eq $(Get-AzADGroup -DisplayName $hrGroupName)) {
                                                       New-AzADGroup -DisplayName $hrGroupName -MailNickname "hrteam" | Out-Null
                                                   }
                                                   
                                                   
                                                   # Create license variable
                                                   $planName = "ENTERPRISEPREMIUM"
                                                   $license = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense
                                                   $license.SkuId = (Get-AzureADSubscribedSku | Where-Object -Property SkuPartNumber -Value $planName -EQ).SkuID
                                                   $licensesToAssign = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses
                                                   $licensesToAssign.AddLicenses = $license
                                                   
                                                   # Create Azure AD Role variable
                                                   $role = Get-AzureADDirectoryRole | Where-Object { $_.displayName -eq "Global Administrator" }
                                                   
                                                   # Create Global Admin Users
                                                   foreach ($adminUser in $adminUsers) {
                                                       $userUPN = $adminUser.Split(" ")[0] + $tenantSPN
                                                       $checkUser = Get-AzADUser -UserPrincipalName $userUPN
                                                       if ($null -ne $checkUser) {
                                                           $existingUsers += $adminUser + "<br>"
                                                       }
                                                       else {
                                                           New-AzADUser -DisplayName $adminUser -Password $securePass -ForceChangePassword:$False -AccountEnabled $true -MailNickname $adminUser.Split(" ")[0] -UserPrincipalName $userUPN -UsageLocation "US" | Out-Null
                                                           Start-Sleep -Seconds 3
                                                           Set-AzureADUserLicense -ObjectId $userUPN -AssignedLicenses $LicensesToAssign
                                                           Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId (Get-AzureADUser | Where-Object { $_.UserPrincipalName -eq $userUPN }).ObjectID
                                                       }
                                                   }
                                                   
                                                   # Create Azure AD Users
                                                   foreach ($aadUser in $aadUsers) {
                                                       $userUPN = $aadUser.Split(" ")[0] + $tenantSPN
                                                       $checkUser = Get-AzADUser -UserPrincipalName $userUPN
                                                       if ($null -ne $checkUser) {
                                                           $existingUsers += $aadUser + "<br>"
                                                       }
                                                       else {
                                                           $userUPN = $aadUser.Split(" ")[0] + $tenantSPN
                                                           New-AzADUser -DisplayName $aadUser -Password $securePass -ForceChangePassword:$False -AccountEnabled $true -MailNickname $aadUser.Split(" ")[0] -UserPrincipalName $userUPN -UsageLocation "US" | Out-Null
                                                           Start-Sleep -Seconds 3
                                                           Set-AzureADUserLicense -ObjectId $userUPN -AssignedLicenses $LicensesToAssign
                                                       }
                                                   }
                                                   
                                                   # Populate evidence variable
                                                   if ($existingUsers.Count -eq 0) {
                                                       $evidence = "Users created and licensed."
                                                   }
                                                   
                                                   if ($existingUsers.Count -gt 0) {
                                                       $evidence = "The following users already exist:<br>$existingUsers"
                                                   }
                                                   
                                                   # Add Azure AD group members
                                                   Add-AzADGroupMember -TargetGroupDisplayName $hrGroupName -MemberUserPrincipalName $adminUsersUpn
                                                   
                                                   # Disconnect from services
                                                   Disconnect-AzAccount | Out-Null
                                                   Disconnect-AzureAD | Out-Null
                                                   ; ScriptDescription=; ScriptGuidance=; ScriptSource=0; ScriptLanguage=0; ScriptTargetId=217246; ScriptEngineImageId=; Delay=30; ErrorAction=0; CustomErrorNotification=; Enabled=False; NotificationName=; ScriptEnginePackagesJson=; RepeatScriptUntilTrue=False; RepeatScriptIntervalSeconds=60; RepeatScriptTimeoutMinutes=10; MaxRetries=0; CopilotPromptJson=}}
InheritTags                                      : False
QuickTagsJson                                    : {}
CustomTagsJson                                   : {}
InheritStorageSettings                           : True
DatacenterAvailability                           : {128, 5, 130, 8}
StorageLoadingPriority                           : 20
LabHostTagsJson                                  : {}
LabFabricBuildSequence                           : 10
ThemeId                                          : 
EnableDisplayDelay                               : False
DisplayDelayValue                                : 
DisplayDelayUnit                                 : 
DisplayDelayMessage                              : 
IntroductionContentUrl                           : 
PreventIntroSkipping                             : False
IntroductionContentMinimumDisplaySeconds         : 30
EndUrl                                           : 
ShowMaxActiveLabInstances                        : False
MaxActiveLabInstances                            : 
MaxAllowedBuildMinutes                           : 30
MaxAllowedBuildTimeAction                        : 0
ShowInstructionsWhileBuilding                    : False
ShowTimer                                        : True
EnableNavigationWarning                          : True
ShowNavigationPane                               : True
NavigationBarWidth                               : 400
UseIntegratedBrowser                             : False
IntegratedBrowserContainerImageId                : 
IntegratedBrowserContainerImageName              : 
ShowContentTab                                   : True
ShowMachinesTab                                  : True
ShowSupportTab                                   : True
UseCustomContentTabLabel                         : False
CustomContentTabLabel                            : 
UseCustomMachinesTabLabel                        : False
CustomMachinesTabLabel                           : 
UseCustomSupportTabLabel                         : False
CustomSupportTabLabel                            : 
EnableCopyPaste                                  : True
ShowVirtualMachinePowerOptions                   : True
EnableInstanceLinkSharing                        : False
AllowLabInstanceNaming                           : False
AllowMultipleActiveInstancesPerUser              : True
EnableScheduledDisablement                       : False
ScheduledDisableDate                             : 
ScheduledDisableTime                             : 
PublishToOrganizationTemplateGallery             : False
TemplateGalleryReuseContainersAndVirtualMachines : False
TemplateGalleryLicenseAgreementId                : 
EnableVirtualMachineInstanceEditing              : False
EnableVncRecordingFeature                        : True
SharedClassEnvironmentRole                       : 0
AutoStartSharedClassEnvironment                  : False
ClassEnvironmentLabProfileId                     : 
AllowCancel                                      : True
AllowSave                                        : True
AllowDisconnect                                  : False
EnableAutoSave                                   : True
EnableLastConsoleSyncTimeout                     : True
LastConsoleSyncTimeoutMinutes                    : 15
EnableLastActivityTimeout                        : True
LastActivityTimeoutMinutes                       : 60
MinimumAutoSaveTimeInvestment                    : 5
MaxSnapshots                                     : 0
ExternalInstruction.Enabled                      : False
LtiOutcomeScoringPolicy                          : 0
LtiOutcomeScoringFormat                          : 0
LtiOutcomePassingScoreMinutes                    : 15
LtiOutcomePassingScoreTaskCompletePercentage     : 70
AllowAnonymousLaunch                             : False
AnonymousLaunchCode                              : 
AnonymousLaunchExpiresChecked                    : False
AnonymousLaunchExpiresDate                       : 
AnonymousLaunchExpiresTime                       : 
AllowAnonymousSave                               : False
AnonymousSaveMaxDays                             : 7
AnonymousSaveMaxSessions                         : 5
AuthenticatedLaunchLinksJson                     : {@{AuthenticationProviderId=1; ExpiresDate=7/12/2024; ExpiresTime=11:55 PM}, @{AuthenticationProviderId=4; ExpiresDate=7/12/2024; ExpiresTime=11:55 PM}}
CloudCredentialPoolAssignmentsJson               : {@{LabProfileId=165887; CloudCredentialPoolId=541; Name=WWL | M365 Enterprise with Calling (Stakeholder: Kim Frank); ReplacementTokenAlias=M365Calling}}
ResourcesJson                                    : {}



